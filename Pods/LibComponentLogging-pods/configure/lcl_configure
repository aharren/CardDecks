#!/usr/bin/env ruby

#
#
# lcl_configure -- LibComponentLogging, configuration
#
#
# Copyright (c) 2014 Arne Harren <ah@0xc0.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'FileUtils'
require 'Pathname'
require 'JSON'
require 'Digest'


#
# Options.
#

@version = "0.1.0"

@verbose = false

@use_colors = true
@color_note = ""
@color_info = ""
@color_error = ""
@color_verbose = ""
@color_normal = ""

def configure_colors()
  if @use_colors
    @color_note = "\033[31m"
    @color_info = ""
    @color_error = "\033[31m"
    @color_verbose = "\033[37m"
    @color_normal = "\033[m"
  else
    @color_note = ""
    @color_info = ""
    @color_error = ""
    @color_verbose = ""
    @color_normal = ""
  end
end

#
# Usage, info, error, etc.
#

@usage=<<END
(Auto-)configuration for LibComponentLogging, version #{@version}

Usage: lcl_configure [<options>] <type> [<folder>]

Options:
  --[no-]colors    (Don't) use colored output.
  --[no-]verbose   (Don't) be verbose about created/modified files etc.
  --help           Print this usage message.
  --version        Print the version.

Types:
  plain            Create configuration files for a plain installation.
  pod              Create configuration files for CocoaPods-managed dependencies.
END

def print_usage_and_exit(message = '')
  error(message) if message != ''
  puts @usage
  exit
end

def error(message)
  puts @color_error + message + @color_normal
  exit
end

def info(message)
  puts @color_info + message + @color_normal
end

def note(message)
  puts @color_note + '[!] ' + message + @color_normal
end

def verbose(message)
  puts @color_verbose + message + @color_normal if @verbose
end

def cite(text, indent)
  ln = text.end_with?("\n") ? '' : "\n"
  return "  >>>>\n" + text.gsub(/^/, indent) + ln + "  <<<<"
end


#
# File/directory utilities.
#

def exists_directory(directory_name)
  return File.directory?(directory_name)
end

def exists_file(file_name)
  return File.file?(file_name)
end

def create_file(file_name)
  FileUtils.rm(file_name) if exists_file(file_name)
  FileUtils.touch(file_name)
end

def copy_file(src_file_name, dst_file_name)
  FileUtils.cp(src_file_name, dst_file_name)
end

def append_to_file(file_name, content)
  File.open(file_name, 'a') do |f|
    f.puts(content)
  end
end

def replace_file(file_name, content)
  File.open(file_name, 'w') do |f|
    f.puts(content)
  end
end

#
# Handling of lcl_configure sections
#

@lcl_configure_section_begin = "/*::lcl_configure:begin::*/\n"
@lcl_configure_section_end = '/*::lcl_configure:end::*/'
@lcl_configure_section_empty = @lcl_configure_section_begin + '' + @lcl_configure_section_end
@lcl_configure_section_match = /^\/\*\:\:lcl_configure\:begin\:\:\*\/[\n\r]*(.*?)^\/\*\:\:lcl_configure\:end\:\:\*\//m

def lcl_configure_section_read_json_data_from_file(file_name)
  # Read the lcl_configure data from the given file.
  content = File.read(file_name)
  configure_section = lcl_configure_section_extract(content)
  return {} if !configure_section

  # Extract JSON part.
  configure_section =~ /^\/\*(.*)^\*\//m
  json_data = $1
  return {} if !json_data

  # Return parsed JSON data.
  parsed_json_data = JSON.parse(json_data)
  return parsed_json_data
end

def lcl_configure_section_insert_in_file(file_name, data)
  # Insert the given data into all lcl_configure sections inside the file
  content = File.read(file_name)
  configure_section = lcl_configure_section_extract(content)
  if !configure_section
    configure_section = lcl_configure_section_empty
  end
  content = content.gsub(@lcl_configure_section_match, lcl_configure_section_create(configure_section + data))
  verbose("Rewriting the lcl_configure section in file '#{file_name}' to\n" + cite(content, '  ') )
  replace_file(file_name, content)
end

def lcl_configure_section_extract(text)
  # Extract the text inside a lcl_configure section with the format
  #   /*::lcl_configure:begin::*/
  #   <data>
  #   /*::lcl_configure:end::*/
  text =~ @lcl_configure_section_match
  return $1
end

def lcl_configure_section_create(data)
  # Put the given data into a lcl_configure section:
  #   /*::lcl_configure:begin::*/
  #   <data>
  #   /*::lcl_configure:end::*/
  section = @lcl_configure_section_begin + data + @lcl_configure_section_end
  return section
end

def lcl_configure_section_clear(text)
  # Replace all lcl_configure sections with an empty section.
  text_new = text.gsub(@lcl_configure_section_match, @lcl_configure_section_empty)
  return text_new
end


#
# Standard configuration files, common parts.
#

@config_components_file_name = "lcl_config_components.h"
@config_logger_file_name = "lcl_config_logger.h"
@config_extensions_file_name = "lcl_config_extensions.h"

def prepare_configure_plain_create_config_file(file_name, config_files)
  # Create new config file if file does not exist.
  if !exists_file(file_name)
    info("Creating configuration file '#{file_name}'")
    create_file(file_name)
  end

  # Clear the lcl_configure section(s) inside the file.
  content = File.read(file_name)
  if (lcl_configure_section_extract(content))
    content = lcl_configure_section_clear(content)
    verbose("Clearing the lcl_configure section in file '#{file_name}'")
  else
    content += @lcl_configure_section_empty
    verbose("Adding an empty lcl_configure section to file '#{file_name}'")
  end
  replace_file(file_name, content)

  # Remember the file.
  config_files.push(file_name)
end

def prepare_configure_plain(config_files)
  # Create all three config files.
  prepare_configure_plain_create_config_file(@config_components_file_name, config_files)
  prepare_configure_plain_create_config_file(@config_logger_file_name, config_files)
  prepare_configure_plain_create_config_file(@config_extensions_file_name, config_files)
end


#
# Configuration for plain installations.
#

def configure_plain()
  # Config files we create.
  config_files = []

  # Prepare configuration files.
  prepare_configure_plain()
end


#
# Configuration for CocoaPods installations.
#

def configure_pod_core(pod_dir, pod_name, configure_file, configure_data, config_files)
  verbose("Configuring '#{pod_name}' with type 'core' and configure data\n" + cite(configure_data.to_s, '  '))

  # Nothing to do for core.
end

def configure_pod_logger(pod_dir, pod_name, configure_file, configure_data, config_files)
  verbose("Configuring '#{pod_name}' with type 'logger' and configure data\n" + cite(configure_data.to_s, '  '))

  # Add header file.
  main_header = configure_data['main_header']
  error("Error: missing 'main_header' in '#{configure_file}'") if !main_header
  content = "#include \"#{main_header}\"\n"
  lcl_configure_section_insert_in_file(@config_logger_file_name, content)

  # Instantiate configuration template file (optional).
  config_template = configure_data['config_template']
  configure_pod_instantiate_config_template(pod_dir, config_template, config_files) if config_template
end

def configure_pod_extension(pod_dir, pod_name, configure_file, configure_data, config_files)
  verbose("Configuring '#{pod_name}' with type 'extension' and configure data\n" + cite(configure_data.to_s, '  '))

  # Add header file.
  main_header = configure_data['main_header']
  error("Error: missing 'main_header' in '#{configure_file}'") if !main_header
  content = "#include \"#{main_header}\"\n"
  lcl_configure_section_insert_in_file(@config_extensions_file_name, content)

  # Instantiate configuration template file (optional).
  config_template = configure_data['config_template']
  configure_pod_instantiate_config_template(pod_dir, config_template, config_files) if config_template
end

def configure_pod_components_embedded(pod_dir, pod_name, components_file, embed_symbol, config_files)
  verbose("Un-embedding '#{pod_name}' with embed symbol '#{embed_symbol}'")

  # Add components.
  content = "#define _#{embed_symbol}lcl_component _lcl_component\n"
  content += "#include \"#{components_file}\"\n"
  content += "#undef _#{embed_symbol}lcl_component\n"
  lcl_configure_section_insert_in_file(@config_components_file_name, content)

  # Create pod-local config files
  config_files.each do |config_file|
    configure_pod_components_embedded_create_local_config_file(pod_name, config_file)
  end

  # Modify the lcl_<embed_symbol>.h,m files inside the pod.
  Dir.glob("#{pod_dir}/#{pod_name}/**/lcl_#{embed_symbol}.{h,m}").each do |file_name|
    configure_pod_components_embedded_unmbed_lcl_file(pod_name, embed_symbol, file_name)
  end
end

def configure_pod_components_embedded_create_local_config_file(pod_name, file_name)
  complete_file_name = "Pods/BuildHeaders/#{pod_name}/" + file_name

  # Create pod-local lcl_config_*.h file.
  content = "#include \"../../../#{file_name}\"\n"
  if (!exists_file(complete_file_name) or File.read(complete_file_name) != content)
    info("Creating configuration file '#{complete_file_name}'")
    replace_file(complete_file_name, content)
  else
    verbose("Configuration file '#{complete_file_name}' already exists")
  end
end

def configure_pod_components_embedded_unmbed_lcl_file(pod_name, embed_symbol, file_name)
  # lcl_<embed_symbol>.h needs defines with embed symbol.
  if /.h$/ =~ file_name
    content = <<END
//
//
// lcl_#{embed_symbol}.h -- LibComponentLogging, embedded, #{pod_name}/#{embed_symbol}
//
// un-embedded by lcl_configure, http://0xc0.de/LibComponentLogging#configure
//

// Use lcl.h from LibComponentLogging-Core pod.
#import "lcl.h"

// Map #{embed_symbol} log levels to plain lcl log levels.
#define #{embed_symbol}lcl_vOff                         lcl_vOff
#define #{embed_symbol}lcl_vCritical                    lcl_vCritical
#define #{embed_symbol}lcl_vError                       lcl_vError
#define #{embed_symbol}lcl_vWarning                     lcl_vWarning
#define #{embed_symbol}lcl_vInfo                        lcl_vInfo
#define #{embed_symbol}lcl_vDebug                       lcl_vDebug
#define #{embed_symbol}lcl_vTrace                       lcl_vTrace

// Map #{embed_symbol} log macros to plain lcl log macros.
#define #{embed_symbol}lcl_log                          lcl_log
#define #{embed_symbol}lcl_log_if                       lcl_log_if

// Map #{embed_symbol} configure function to plain lcl configure functions.
#define #{embed_symbol}lcl_configure_by_component       lcl_configure_by_component
#define #{embed_symbol}lcl_configure_by_identifier      lcl_configure_by_identifier
#define #{embed_symbol}lcl_configure_by_header          lcl_configure_by_header
#define #{embed_symbol}lcl_configure_by_name            lcl_configure_by_name

// Map #{embed_symbol} log components to log components from combined lcl_config_components.h file.
enum _#{embed_symbol}lcl_enum_component_t {
#   define  _#{embed_symbol}lcl_component(_identifier, _header, _name) \\
  #{embed_symbol}lcl_c##_identifier = lcl_c##_identifier, \\
  __lcl_log_symbol_#{embed_symbol}lcl_c##_identifier = lcl_c##_identifier,
#   include "lcl_config_components_#{embed_symbol}.h"
#   undef   _#{embed_symbol}lcl_component
  _#{embed_symbol}lcl_component_t_count
};

// Map #{embed_symbol} component levels to plain lcl component levels.
#define _#{embed_symbol}lcl_component_level             _lcl_component_level

// Map #{embed_symbol} symbol helpers to plain lcl symbol helpers.
#define __#{embed_symbol}lcl_log_symbol                 __lcl_log_symbol
#define __lcl_log_symbol_#{embed_symbol}lcl_vOff        __lcl_log_symbol_lcl_vOff
#define __lcl_log_symbol_#{embed_symbol}lcl_vCritical   __lcl_log_symbol_lcl_vCritical
#define __lcl_log_symbol_#{embed_symbol}lcl_vError      __lcl_log_symbol_lcl_vError
#define __lcl_log_symbol_#{embed_symbol}lcl_vWarning    __lcl_log_symbol_lcl_vWarning
#define __lcl_log_symbol_#{embed_symbol}lcl_vInfo       __lcl_log_symbol_lcl_vInfo
#define __lcl_log_symbol_#{embed_symbol}lcl_vDebug      __lcl_log_symbol_lcl_vDebug
#define __lcl_log_symbol_#{embed_symbol}lcl_vTrace      __lcl_log_symbol_lcl_vTrace

END
  else
    # lcl_<embed_symbol>.m just needs to be overwritten, just leave it blank.
    content = <<END
//
//
// lcl_#{embed_symbol}.m -- LibComponentLogging, embedded, #{pod_name}/#{embed_symbol}
//
// un-embedded by lcl_configure, http://0xc0.de/LibComponentLogging#configure
//

// empty

END
  end
  if (!exists_file(file_name) or File.read(file_name) != content)
    info("Rewriting file '#{file_name}'")
    replace_file(file_name, content)
  else
    verbose("Rewritten file '#{file_name}' already exists")
  end
end

def configure_pod_instantiate_config_template(pod_dir, config_template, config_files)
  config_template_file = Pathname(pod_dir) + config_template
  config_template_sha256 = Digest::SHA256.file(config_template_file).hexdigest
  verbose("Hash of template configuration file '#{config_template_file}' is '#{config_template_sha256}'")
  config_file_name = config_template.gsub(/\.template/, '')
  if exists_file(config_file_name)
    # We've stored the SHA256 hash of the original file inside a
    #   /*::lcl_configure:begin::*/
    #     <JSON-encoded data>
    #   /*::lcl_configure:end::*/
    # section in the configuration file.
    # If the stored hash matches the hash of the current template file,
    # then we assume that the existing configuration file originates from that
    # template file. Then, there's nothing to do.
    data = lcl_configure_section_read_json_data_from_file(config_file_name)
    verbose("Extracted data from lcl_configure section in configuration file '#{config_file_name}' is\n" + cite(data.to_s, '  '))
    if data['base'] != config_template_sha256
      # Existing file doesn't originate from template file, create .new file.
      info("Creating configuration file '#{config_file_name}' from template '#{config_template_file}'")
      config_new_file_name = config_file_name + '.new'
      configure_pod_copy_file_with_lcl_configure_data(config_template_file, config_template_sha256, config_new_file_name)
      note("Configuration file '#{config_file_name}' already exists, please merge with new file '#{config_new_file_name}'")
    else
      verbose("Configuration file '#{config_file_name}' is based on current template file")
    end
  else
    # Create configuration file, based on template file. Store the SHA256 hash
    # of the template file inside a
    #   /*::lcl_configure:begin::*/
    #     <JSON-encoded data>
    #   /*::lcl_configure:end::*/
    # section in the created configuration file.
    info("Creating configuration file '#{config_file_name}' from template '#{config_template_file}'")
    configure_pod_copy_file_with_lcl_configure_data(config_template_file, config_template_sha256, config_file_name)
    note("Configuration file '#{config_file_name}' needs to be adapted before compiling your project, e.g. adapt '<UniquePrefix>'")
  end

  # Remember the config file.
  config_files.push(config_file_name)
end

def configure_pod_copy_file_with_lcl_configure_data(config_template_file, config_template_sha256, file_name)
  # Copy the file and add a lcl_configure data at the end.
  copy_file(config_template_file.to_s, file_name)
  data = <<END
/*
  {
    "base" : "#{config_template_sha256}"
  }
*/
END
  data = lcl_configure_section_create(data)
  append_to_file(file_name, data)
end


def contained_in_podfile_lock(pod_name)
  # The Podfile.lock contains the following data (CocoaPods 0.33.1):
  # PODS:
  # - <pod_name_1> (<version_1>)
  # - <pod_name_2> (<version_2>)
  # ...
  # As the pod name might be the prefix of another pod, e.g. LibComponentLogging-NSLog
  # is a prefix of LibComponentLogging-NSLogger, we search for "<pod name> ".
  # We don't expect that LibComponentLogging-xyz is a suffix of another pod.
  content = File.read('Podfile.lock')
  return content.include?(pod_name + ' ')
end

# Configure for CocoaPods.
def configure_pod()
  # Check existence of CocoaPods files and directories.
  error("Error: no 'Podfile' file found") if !exists_file('Podfile')
  error("Error: no 'Podfile.lock' file found") if !exists_file('Podfile.lock')
  error("Error: no 'Pods' directory found") if !exists_directory('Pods')

  # Config files we create.
  config_files = []

  # Prepare config files.
  prepare_configure_plain(config_files)

  # Used core and logger pods.
  pod_name_core = nil
  pod_name_logger = nil

  # Search for pod.lcl_configure files inside the Pods directory.
  Dir.glob('Pods/*/pod.lcl_configure').each do |configure_file|
    # Extract name of pod from path.
    pod_dir = File.dirname(configure_file)
    pod_name = File.basename(pod_dir).to_s

    # Check Podfile.lock.
    next if !contained_in_podfile_lock(pod_name)

    # Read and parse the pod.lcl_configure file.
    # The file has the following structure:
    # {
    #   "name"           : "<name>",
    #   "type"           : "<type>",            // core, logger, extension
    #   "main_header"    : "<file>.h",
    #   "config_template": "<file>.template.h"  // optional
    # }
    configure_data = JSON.parse(File.read(configure_file))
    type = configure_data['type']
    error("Error: missing 'type' in '#{configure_file}'") if !type
    name = configure_data['name']
    error("Error: missing 'name' in '#{configure_file}'") if !name

    # Process configure file.
    case type
      when 'core'
        error("Error: cannot use '#{pod_name}' as core, '#{pod_name_core}' is already used") if pod_name_core
        info("Using #{pod_name} (#{type})")
        configure_pod_core(pod_dir, pod_name, configure_file, configure_data, config_files)
        pod_name_core = pod_name
      when 'logger'
        error("Error: cannot use '#{pod_name}' as logger, '#{pod_name_logger}' is already used") if pod_name_logger
        info("Using #{pod_name} (#{name} #{type})")
        configure_pod_logger(pod_dir, pod_name, configure_file, configure_data, config_files)
        pod_name_logger = pod_name
      when 'extension'
        info("Using #{pod_name} (#{name} #{type})")
        configure_pod_extension(pod_dir, pod_name, configure_file, configure_data, config_files)
      else
        error("Error: pod '#{pod_name}' has unsupported type '#{type}'")
    end
  end

  # Search for lcl_config_components_*.h files inside the Pods directory.
  Dir.glob('Pods/**/lcl_config_components_*.h').each do |components_file|
    base_path = Pathname.new(components_file)
    base_path = base_path.parent while base_path.parent.to_s != 'Pods'
    pod_dir = File.dirname(base_path)
    pod_name = File.basename(base_path).to_s

    # Skip headers directories.
    next if pod_name == 'BuildHeaders' or pod_name == 'Headers'

    # Check Podfile.lock.
    next if !contained_in_podfile_lock(pod_name)

    # Extract embed symbol.
    /lcl_config_components_(.+)\.h/ =~ components_file
    embed_symbol = $1

    # Process.
    info("Using #{pod_name} (un-embedded #{pod_name}/#{embed_symbol})")
    configure_pod_components_embedded(pod_dir, pod_name, components_file, embed_symbol, config_files)
  end
end

def main(args)
  argi = 0

  # Parse options.
  while args[argi] =~ /^--/ do
    option = args[argi]
    argi += 1
    case option
      when '--colors'
        @use_colors = true
      when '--no-colors'
        @use_colors = false
      when '--verbose'
        @verbose = true
      when '--no-verbose'
        @verbose = false
      when '--help'
        print_usage_and_exit('')
      when '--version'
        puts @version
        exit
      else
        print_usage_and_exit("Error: unknown option '#{option}'")
    end
  end

  # Configure colors.
  configure_colors()

  # Parse <type>.
  type = args[argi]
  argi += 1
  print_usage_and_exit('Error: missing argument <type>') if !type

  # Parse <folder>, optional.
  folder = args[argi]
  argi += 1
  folder = '.' if !folder

  # Process <type>.
  case type
    when 'plain'
      Dir.chdir(folder) do
        configure_plain()
      end
    when 'pod'
      Dir.chdir(folder) do
        configure_pod()
      end
    else
      print_usage_and_exit("Error: unknown type '#{type}', available types are 'plain', 'pod'")
  end

  exit
end

main(ARGV)
